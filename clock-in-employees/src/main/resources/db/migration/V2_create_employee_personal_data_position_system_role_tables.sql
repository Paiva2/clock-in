CREATE TABLE IF NOT EXISTS tb_employees (
    EM_ID BIGSERIAL PRIMARY KEY,
    EM_FIRST_NAME VARCHAR(100) NOT NULL,
    EM_LAST_NAME VARCHAR(100) NULLABLE,
    EM_EMAIL VARCHAR(200) UNIQUE NOT NULL,
    EM_PASSWORD VARCHAR NOT NULL,
    EM_PROFILE_PICTURE_URL VARCHAR NULLABLE,
    EM_CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    EM_UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TRIGGER update_timestamp_employee BEFORE UPDATE ON tb_employees
FOR EACH ROW EXECUTE PROCEDURE moddatetime(EM_UPDATED_AT);

CREATE TABLE IF NOT EXISTS tb_personal_data (
    PD_ID BIGSERIAL PRIMARY KEY,
    PD_PHONE VARCHAR(20) NOT NULLABLE,
    PD_STREET VARCHAR(100) NOT NULL,
    PD_ZIPCODE VARCHAR(100) NOT NULL,
    PD_CITY VARCHAR(100) NOT NULL,
    PD_COUNTRY VARCHAR(100) NOT NULL,
    PD_STATE VARCHAR(100) NOT NULL,
    PD_HOUSE_NUMBER VARCHAR(50) NOT NULL,
    PD_COMPLEMENT VARCHAR(200) NULLABLE,
    PD_CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PD_UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PD_EMPLOYEE_ID REFERENCES tb_employees(EM_ID) NOT NULL
);

CREATE TRIGGER update_timestamp_personal_data BEFORE UPDATE ON tb_personal_data
FOR EACH ROW EXECUTE PROCEDURE moddatetime(PD_UPDATED_AT);

CREATE TABLE IF NOT EXISTS tb_positions (
       PS_ID BIGSERIAL PRIMARY KEY,
       PS_NAME VARCHAR(50) NOT NULL UNIQUE,
       PS_CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
       PS_UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

       CONSTRAINT check_position CHECK (PS_NAME in ('HUMAN_RESOURCES', 'EMPLOYEE', 'MANAGER', 'DIRECTOR', 'CEO'))
);

CREATE TRIGGER update_timestamp_positions BEFORE UPDATE ON tb_positions
FOR EACH ROW EXECUTE PROCEDURE moddatetime(PS_UPDATED_AT);

CREATE TABLE IF NOT EXISTS tb_system_roles (
   SR_ID BIGSERIAL PRIMARY KEY,
   SR_ROLE VARCHAR(50) NOT NULL UNIQUE,
   SR_CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
   SR_UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT check_position CHECK (SR_ROLE in ('USER', 'ADMIN'))
);

CREATE TRIGGER update_timestamp_system_roles BEFORE UPDATE ON tb_system_roles
FOR EACH ROW EXECUTE PROCEDURE moddatetime(SR_UPDATED_AT);

CREATE TABLE IF NOT EXISTS tb_employee_system_role (
       ER_EMPLOYEE_ID REFERENCES tb_employees(EM_ID),
       ER_SYSTEM_ROLE_ID REFERENCES tb_system_roles(SR_ID),
       ER_CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
       ER_UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

        CONSTRAINT tb_employe_system_role_pkey PRIMARY KEY (ER_EMPLOYEE_ID, ER_SYSTEM_ROLE_ID)
);

CREATE UNIQUE INDEX tb_employe_system_role_pkey ON tb_employee_system_role(ER_EMPLOYEE_ID int8_ops, ER_SYSTEM_ROLE_ID int8_ops);

CREATE TRIGGER update_timestamp_system_roles BEFORE UPDATE ON tb_system_roles
FOR EACH ROW EXECUTE PROCEDURE moddatetime(ER_UPDATED_AT);

CREATE TABLE IF NOT EXISTS tb_employee_position (
    EP_EMPLOYEE_ID REFERENCES tb_employees(EM_ID),
    EP_POSITION_ID REFERENCES tb_positions(PS_ID),
    EP_CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    EP_UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT tb_employe_position_pkey PRIMARY KEY (EP_EMPLOYEE_ID, EP_POSITION_ID)
);

CREATE UNIQUE INDEX tb_employe_position_pkey ON tb_employee_position(EP_EMPLOYEE_ID int8_ops, EP_POSITION_ID int8_ops);

CREATE TRIGGER update_timestamp_tb_employee_position BEFORE UPDATE ON tb_employee_position
FOR EACH ROW EXECUTE PROCEDURE moddatetime(EP_UPDATED_AT);